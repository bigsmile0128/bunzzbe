/*
 * FizzBuzz Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)

// DefaultApiService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// FizzbuzzPost - Get a fizzbuzz message
func (s *DefaultApiService) FizzbuzzPost(ctx context.Context, fizzbuzzPostRequest FizzbuzzPostRequest) (ImplResponse, error) {
	// TODO - update FizzbuzzPost with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, DefaultResponse{}) or use other options such as http.Ok ...
	//return Response(200, DefaultResponse{}), nil

	//TODO: Uncomment the next line to return response Response(400, DefaultResponse{}) or use other options such as http.Ok ...
	//return Response(400, DefaultResponse{}), nil

	//TODO: Uncomment the next line to return response Response(500, DefaultResponse{}) or use other options such as http.Ok ...
	//return Response(500, DefaultResponse{}), nil

	m3 := fizzbuzzPostRequest.Count%3 == 0
	m5 := fizzbuzzPostRequest.Count%5 == 0

	switch {
	case m3 && m5:
		return Response(http.StatusOK, DefaultResponse{Status: http.StatusOK, Message: "FizzBuzz"}), nil
	case m3:
		return Response(http.StatusOK, DefaultResponse{Status: http.StatusOK, Message: "Fizz"}), nil
	case m5:
		return Response(http.StatusOK, DefaultResponse{Status: http.StatusOK, Message: "Buzz"}), nil
	default:
		return Response(http.StatusOK, DefaultResponse{Status: http.StatusOK, Message: "None"}), nil
	}
}
